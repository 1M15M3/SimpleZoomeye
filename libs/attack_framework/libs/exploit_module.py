#coding=utf-8
import time
from elasticsearch import Elasticsearch
from sqlhelper import DBHelper
from scanner import *
from ip_reverse import *
from libs.exploit_http import EXPHttp
from conf.safecat import *

#生成的报告名称
file_name = REPORT_FOLD + str(time.time()) + '.cat'

class EXPModule():

	def __init__(self,exploit_file):
		global file_name
		self.exp = exploit_file
		self.es = Elasticsearch('127.0.0.1:9200')
		self.file = open(file_name,'a')
		self.file.write('domain_list\t\t\tattack_results\n')
		self.httptools = EXPHttp()



	'''根据exp进行全网扫描，并生成报告'''
	def scanAll(self):
		global file_name
		#数据库记录
		db = DBHelper()
		sql = "insert into job_status (status,path) values(%d,%s)" % (0,file_name)
		db.execute_ddl_sql('safe_jobs',sql)
		#获取全部的域名列表
		domain_list = []
		query = {
			'query':{
				'match_all':{}
			},
			'_source':['domain']
		}
		res = self.es.search(body=query,index='safecat',doc_type='hostcrawler',size=1000000)
		for x in res['hits']['hits']:
			domain_list.append(x['_source']['domain'])

		#开始载入exp扫描并写入记录文件
		print '[+]Start scanning in mode all,please wait...'
		content = ''
		for url in domain_list:
			res = self.exp.exploit(url) 
			if not res:
				record = '%s\t\t\tFailed\n' % url 
				content += record
			else:
				record = '%s\t\t\t%s\n' % (url,str(res))
				content += record
			self.file.write(record)
		#任务完成，写入数据库
		sql = '''update job_status set status=%s,content='%s' where id=(select tmp.id from (select id from job_status order by id desc limit 1)tmp)''' % ('1',content)
		print sql
		db.execute_ddl_sql("safe_jobs",sql)
		self.file.close()


	'''根据exp进行单个主机扫描，不用生成报告，直接echo'''
	def scanOneHost(self,target):
		#数据库记录
		content = ''
		db = DBHelper()
		sql = "insert into job_status (status,path) values(%s,'%s')" % ('0',file_name)
		db.execute_ddl_sql('safecat_jobs',sql)

		print '[+]Start scanning in mode single...'
		res = self.exp.exploit(target)
		if not res:
			print '%s Exploit Failed:Unknown' % domain
			content += '%s\tExploit\tFailed:Unknown' % domain
		else:
			print 'Exploit Success:%s\t\t%s' % (x,str(res))
			content = '%sExploit\tSuccess:%s\t\t%s' % (domain,x,str(res))

		content = content.replace('\n',' ')
		sql = '''update job_status set status=%s,content='%s' where id=(select tmp.id from (select id from job_status order by id desc limit 1)tmp)''' % ('1',content)
		print sql
		db.execute_ddl_sql("safecat_jobs",sql)
		
	'''根据IP段扫描'''
	def scanOneRange(self,startip,endip):
		ip_list = []
		tmp_list = []
		domain_list = []
		#数据库记录
		db = DBHelper()
		sql = "insert into job_status (status,path) values(%d,%s)" % (0,file_name)
		db.execute_ddl_sql('safe_jobs',sql)

		myscanner = Scanner()
		ip_reverse = IPReverse()
		ip_list = myscanner.WebScanner(startip,endip)
		for x in ip_list:
			tmp_list = ip_reverse.getDomainsList(x)
			if tmp_list == None:
				continue
			domain_list.extend(tmp_list)

		content = ''
		for url in domain_list:
			res = self.exp.exploit(url)
			if not res:
				record = 'Exploit Failed:Unknown'
				content += record
			else:
				record = 'Exploit Success:%s\t\t%s' % (url,str(res))
				content += record
			self.file.write(record)
		sql = '''update job_status set status=%s,content='%s' where id=(select tmp.id from (select id from job_status order by id desc limit 1)tmp)''' % ('1',content)
		print sql
		db.execute_ddl_sql("safe_jobs",sql)
		self.file.close()











